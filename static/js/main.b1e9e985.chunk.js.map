{"version":3,"sources":["components/TodoForm.js","components/TodoText.js","components/Todo.js","components/TodoLanding.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","_this","setState","Object","defineProperty","target","name","value","createTodo","preventDefault","props","onSubmit","id","shortid","generate","complete","alert","react_default","a","createElement","Fragment","className","this","onChange","placeholder","type","onClick","React","Component","TodoText","strike","todoText","Todo","mode","onEdit","onUpdate","handleChangeTodoText","e","todo","_this2","esm_extends","_this$state","style","paddingTop","checked","toggleComplete","role","aria-label","onDelete","TodoList","todos","addTodo","concat","toConsumableArray","map","objectSpread","handleDeleteTodo","filter","handleUpdateTodo","updateText","todosComplete","todosNotComplete","forEach","TodoForm_TodoForm","length","Todo_Todo","key","App","TodoLanding_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1e9e985.chunk.js","sourcesContent":["import React from \"react\";\nimport shortid from \"shortid\";\n\nexport default class TodoForm extends React.Component {\n  state = {\n    text: \"\"\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  /**\n   * Create new todo\n   */\n  createTodo = event => {\n    event.preventDefault();\n    if (this.state.text) {\n      this.props.onSubmit({\n        id: shortid.generate(),\n        text: this.state.text,\n        complete: false\n      });\n      this.setState({ text: \"\" });\n    } else {\n      // Alter the user when the field empty\n      alert(\"Enter todo before hit add\");\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"col-md-4 col-md-offset-4\">\n          <form className=\"form-inline\">\n            <div className=\"form-group mx-sm-3 mb-2\">\n              <input\n                name=\"text\"\n                id=\"todo\"\n                className=\"form-control\"\n                value={this.state.text}\n                onChange={this.handleChange}\n                placeholder=\"Add todo\"\n              />\n            </div>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary mb-2\"\n              onClick={this.createTodo}\n            >\n              <i className=\"fas fa-plus-circle\" />\n            </button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\n/** Just stateless component show the text with strike or \n * show normally based on strike value\n */\nexport default props => {\n  return props.strike ? (\n    <strike>{props.todoText}</strike>\n  ) : (\n    <span>{props.todoText}</span>\n  );\n};\n","import React from \"react\";\nimport TodoText from \"./TodoText\";\n\nexport default class Todo extends React.Component {\n  state = {\n    mode: \"show\",\n    todoText: \"\"\n  };\n\n  componentDidMount() {\n    // eslint-disable-next-line\n    this.state.todoText = this.props.todo.text;\n  }\n\n  onEdit = () => {\n    this.setState({ mode: \"edit\" });\n  };\n\n  onUpdate = id => {\n    this.props.onUpdate(id, this.state.todoText);\n    this.setState({ mode: \"show\" });\n  };\n\n  handleChangeTodoText = e => {\n    this.setState({ todoText: e.target.value });\n  };\n\n  render() {\n    const { ...props } = this.props;\n    const { mode, todoText } = this.state;\n    return (\n      <div className=\"container\" style={{ paddingTop: \"5px\" }}>\n        <div className=\"row col-sm-12\">\n          <div className=\"col-sm-1\">\n            <input\n              type=\"checkbox\"\n              value=\"\"\n              checked={props.todo.complete}\n              onClick={props.toggleComplete}\n            />\n          </div>\n          <div className=\"col-sm-4\">\n            {mode === \"show\" ? (\n              <TodoText\n                todoText={props.todo.text}\n                strike={props.todo.complete}\n              />\n            ) : (\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={todoText}\n                onChange={this.handleChangeTodoText}\n              />\n            )}\n          </div>\n          <div className=\"col-sm-2\">\n            <div\n              className=\"btn-group mr-2\"\n              role=\"group\"\n              aria-label=\"First group\"\n            >\n              {mode === \"show\" ? (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  onClick={this.onEdit}\n                >\n                  Edit\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  onClick={() => this.onUpdate(props.todo.id)}\n                >\n                  Save\n                </button>\n              )}\n              <button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                onClick={props.onDelete}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport Todo from \"./Todo\";\n\nexport default class TodoList extends React.Component {\n  state = {\n    todos: []\n  };\n\n  /**\n   * Add a new todo\n   */\n  addTodo = todo => {\n    this.setState(state => ({\n      todos: [todo, ...state.todos]\n    }));\n  };\n\n  /**\n   * make todo as complete or not complete based on previous state\n   */\n  toggleComplete = id => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            complete: !todo.complete\n          };\n        } else {\n          return todo;\n        }\n      })\n    }));\n  };\n\n  handleDeleteTodo = id => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.id !== id)\n    }));\n  };\n\n  /**\n   * Update specific todo message\n   */\n  handleUpdateTodo = (id, updateText) => {\n    this.setState(state => {\n      // eslint-disable-next-line\n      todos: state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.text = updateText;\n        }\n        return todo;\n      });\n    });\n  };\n\n  render() {\n    let todosComplete = [];\n    let todosNotComplete = [];\n\n    this.state.todos.forEach(todo => {\n      if (todo.complete) {\n        todosComplete = [todo, ...todosComplete];\n      } else {\n        todosNotComplete = [todo, ...todosNotComplete];\n      }\n    });\n\n    return (\n      <div className=\"container\">\n        <h3>Add Todo</h3>\n        <TodoForm onSubmit={this.addTodo} />\n        <h3>Todo {todosNotComplete.length}</h3>\n        {todosNotComplete.map(todo => (\n          <Todo\n            key={todo.id}\n            toggleComplete={() => this.toggleComplete(todo.id)}\n            onDelete={() => this.handleDeleteTodo(todo.id)}\n            onUpdate={this.handleUpdateTodo}\n            todo={todo}\n          />\n        ))}\n        <h3>Completed {todosComplete.length}</h3>\n        {todosComplete.map(todo => (\n          <Todo\n            key={todo.id}\n            toggleComplete={() => this.toggleComplete(todo.id)}\n            onDelete={() => this.handleDeleteTodo(todo.id)}\n            onUpdate={this.handleUpdateTodo}\n            todo={todo}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoLanding from \"./components/TodoLanding\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoLanding />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}